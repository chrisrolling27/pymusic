import mido
from mido import MidiFile, MidiTrack, Message
import os

def create_variable_duration_midi(note_data, filename):
    """
    Create a MIDI file with variable note durations.

    Args:
    - note_data (list of tuples): Each tuple contains a note and its duration.
    - filename (str): Name of the output MIDI file.
    """
    # Create a new MIDI file and track
    mid = MidiFile()
    track = MidiTrack()
    mid.tracks.append(track)

    # Define constants
    tempo = mido.bpm2tempo(90)  # Set tempo to 90 BPM
    track.append(mido.MetaMessage('set_tempo', tempo=tempo))
    ticks_per_beat = mid.ticks_per_beat  # Default is 480

    # Duration mapping
    duration_mapping = {
        '16th': ticks_per_beat // 4,
        'quarter': ticks_per_beat,
        'half': 2 * ticks_per_beat,
        'whole': 4 * ticks_per_beat,
    }

    # Add notes to the track with variable durations
    for note, duration in note_data:
        duration_ticks = duration_mapping.get(duration, ticks_per_beat)
        track.append(Message('note_on', note=note, velocity=64, time=0))
        track.append(Message('note_off', note=note, velocity=64, time=duration_ticks))

    # Save the MIDI file to the Downloads folder
    downloads_folder = os.path.join(os.path.expanduser('~'), 'Downloads')
    filepath = os.path.join(downloads_folder, filename)
    mid.save(filepath)

# Example usage
note_data = [(60, 'quarter'), (62, 'quarter'), (64, 'half'), (65, 'whole')]  # Example note data
create_variable_duration_midi(note_data, 'output2.mid')
